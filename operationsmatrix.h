#ifndef OPERATIONSMATRIX_H_INCLUDED
#define OPERATIONSMATRIX_H_INCLUDED

typedef struct matrix matrix;


/*Складывает 2 матрицы, записывая результат в третью
На вход поступают 3 матрици. Первая та в которую записывают результат, оставшиеся - те который складываются
На выходе указатель на матрицу результат сложения
*/
matrix * matrix_sum(matrix *m,const matrix *x,const matrix *y);


/*К матрице m прибавляет матрицу x (действие m += x)
На вход поступает матрица к которой будет применено добавление, матрица которую будем добавлять
Возвращает указатель на матрицу к которой было применено добавление
*/
matrix * matrix_add(matrix * m, const matrix * x);


/*Умножение матрицы на скаляр(вещественное число)
На вход поступает указатель на матрицу в которой будет записан результат умножения, указатель на матрицу которую умножаем, скаляр
На выходе указатель на матрицу с результатом умножения
*/
matrix * matrix_skalear_multi(matrix *m, matrix *x, double a);


/*Из матрицы x вычитает матрицу y, записывая результат в m
На вход поступают 3 матрици. Первая та в которую записывают результат, оставшиеся - те которые вычитаются
На выходе указатель на матрицу результат разности
*/
matrix * matrix_vichet(matrix *m, const matrix *x, const matrix *y);


/*От матрицы m вычитает матрицу x (действие m -= x)
На вход поступает матрица к которой будет применено действие, матрица которую будем вычитать
Возвращает указатель на матрицу к которой было применено вычитание
*/
matrix * matrix_add_vichet(matrix * m, const matrix * x);


/*Умножение матрица x на y
На входе указатель на матрицу для записи результата умножения
На выходе указатель на матрицу с результатом умножения
*/
matrix * matrix_multi(matrix * m, const matrix * x, const matrix * y);


/*Матрицу m умножает на матрицу x (действие m *= x)
На вход поступает матрица к которой будет применено добавление-умножение, матрица на которую будем умножать
Возвращает указатель на матрицу к которой было применено добавление-умножение
*/
matrix * matrix_add_multi(matrix * m, const matrix * x);


/*Транспонирует матрицу
На вход поступает указатель на матрицу, которую нужно протранспонировать
На выходе указатель на транспонированную матрицу*/
matrix * matrix_transport(matrix * m);


/*умножает строку матрицы на число
на входе указатель на матрицу, вещественное число, номер строки
Возвращает указатель на матрицу
*/
matrix * matrix_str_multi_cislo(matrix * m, double a, size_t i);


/*Меняет местами две строки
На вход указатель на матрицу, номера строк, которые нужно поменять местами
Возвращает указатель на матрицу
*/
matrix * matrix_str_swap(matrix * m, size_t i1, size_t i2);


/*К строке i1 прибаляет i2 (i1 += i2)
На вход указатель на матрицу, номера строк,
Возвращает указатель на матрицу
*/
matrix * matrix_str_sum(matrix * m, size_t i1, size_t i2);

/*К строке i1 прибаляет i2 умноженную на вещестенное число а(i1 += i2 * а)
На вход указатель на матрицу, номера строк,
Возвращает указатель на матрицу
*/
matrix * matrix_str_mainsum(matrix * m, size_t i1, size_t i2, double a);

#endif // OPERATIONSMATRIX_H_INCLUDED
