#ifndef STRUCTMATRIX_H_INCLUDED
#define STRUCTMATRIX_H_INCLUDED
#include <stdio.h>

typedef struct matrix matrix;

/*Создание матрицы
Возвращает указатель на структуру
На вход поступают высота и ширина матрицы
*/
matrix * matrix_alloc(size_t h, size_t w);


/*Освобождение памяти
На вход поступает указатель на структуру матрицы
*/
void matrix_free(matrix *m);


/*Доступ к элементам матрицы (неконстантный случай)
На вход поступает указатель на структуру матрицы, индексы элемента к которому хочется получить доступ (i - строка, j - столбец)
Возвращает указатель на этот элемент
*/
double *matrix_get(matrix *m, size_t i, size_t j);


/*Доступ к элементам матрицы (константный случай)
На вход поступает указатель на структуру матрицы, индексы элемента к которому хочется получить доступ (i - строка, j - столбец)
Возвращает указатель на этот элемент
*/
double *matrix_constget(const matrix *m, size_t i, size_t j);


/*копирует матрицу
На вход поступает указатель на матрицу, которую нужно скопировать
Возвращает указатель на скопированную матрицу или NULL в случае неудачи
*/
matrix * matrix_copy(const matrix * m);


/*Инициализирует матрицу нулями
На вход поступает указалеть на матрицу
Выходные данные - указатель на иницмализированнную матрицу
*/
matrix * matrix_init(matrix * m);


/*Ввод значений матрицы
На вход поступает указалеть на матрицу
Выходные данные - указатель на эту же матрицу
*/
matrix * matrix_vvod(matrix * m);


/*Вывод значений матрицы
На вход поступает указалеть на матрицу
*/
void matrix_vivod(matrix * m);


/*Создает нулевую матрицу
На вход поступают высота ии ширина матрицы
возвращает указатель на эту матрицу либо NULL в случае неудачи
*/
matrix * matrix_zero_alloc(size_t h, size_t w);


/*Преобразует матрицу в еденичную
На вход поступают высота ии ширина матрицы
возвращает указатель на эту матрицу либо NULL в случае неудачи
*/
matrix * matrix_edenich(matrix * m);


/*Создает еденичную матрицу
На вход поступают высота и ширина матрицы
возвращает указатель на эту матрицу либо NULL в случае неудачи
*/
matrix * matrix_edenich_alloc(size_t h, size_t w);


/*изменяет размер матрицы
на вход поступает матрица, чей размер нужно изменить, новая высота, новая ширина
на выходе - указатель на измененную матрицу
*/
matrix * matrix_resize(matrix *m, size_t new_h, size_t new_w);


/*присваивает одной матрице значения другой
на вход поступают указатели на матрицы. (к которой нужно присвоить и ту чьи значения нужно присвоить)
на выходе указатель на матрицу к которой происходило присваивание
*/
matrix * matrix_assign(matrix * m1, const matrix * m2);


#endif // STRUCTMATRIX_H_INCLUDED
